'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = changeFormReducer;

var _actionTypes = require('../../action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _get = require('../../utils/get');

var _get2 = _interopRequireDefault(_get);

var _shallowEqual = require('fbjs/lib/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _mapValues = require('../../utils/map-values');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _v1FormReducer = require('../v1-form-reducer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateFieldValue(field, value) {
  var method = void 0;

  if ((0, _shallowEqual2.default)(field.value, value)) return field;

  if (Array.isArray(value)) {
    method = function method(val, iter) {
      return Array.prototype.map.call(val, iter).filter(function (a) {
        return !!a;
      });
    };
  } else if ((0, _isPlainObject2.default)(value)) {
    method = function method(val, iter) {
      return (0, _mapValues2.default)(val, iter);
    };
  } else {
    return _icepick2.default.merge(_v1FormReducer.initialFieldState, {
      value: value,
      pristine: false,
      validated: false
    });
  }

  var updatedField = method(value, function (subValue, index) {
    var subField = field[index];

    if (subField) {
      if (Object.hasOwnProperty.call(subField, '$form')) {
        return updateFieldValue(subField, subValue);
      }

      if ((0, _shallowEqual2.default)(subValue, subField.value)) {
        return subField;
      }

      return _icepick2.default.merge(subField, {
        value: subValue,
        pristine: false,
        validated: false
      });
    }

    // Subfield did not exist or was removed
    return false;
  });

  var dirtyFormState = _icepick2.default.merge(field.$form || _v1FormReducer.initialFieldState, {
    pristine: false,
    validated: false
  });

  return _icepick2.default.set(updatedField, '$form', _icepick2.default.set(dirtyFormState, 'value', value));
}

function changeFormReducer(state, action, localPath) {
  if (action.type !== _actionTypes2.default.CHANGE) return state;

  var field = (0, _get2.default)(state, localPath, _v1FormReducer.initialFieldState);

  var updatedField = updateFieldValue(field, action.value);

  return _icepick2.default.setIn(state, localPath, updatedField);
}